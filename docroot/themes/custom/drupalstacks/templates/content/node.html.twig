{#
/**
 * @file
 * Olivero's theme implementation to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: (optional) The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: (optional) Themed creation date field.
 * - author_name: (optional) Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 *
 * @see template_preprocess_node()
 */
#}

{%
  set layout = layout ? 'layout--' ~ layout|clean_class
%}

{%
  set classes = [
    'node',
    'node--type-' ~ node.bundle|clean_class,
    layout ? 'grid-full',
    node.isPromoted() ? 'node--promoted',
    node.isSticky() ? 'node--sticky',
    not node.isPublished() ? 'node--unpublished',
    view_mode ? 'node--view-mode-' ~ view_mode|clean_class,
    'card',
    'h-100',
    'shadow-sm',
    'border-0'
  ]
%}
{% set aria_label = label is not iterable and label is not empty ? label : '' %}

<div class="col-md-6 col-lg-4 mb-4 d-flex">

  <article{{ attributes.addClass(classes).setAttribute('role', 'article').setAttribute('aria-label', aria_label) }}>

    {# Badges for promoted/sticky #}
    {% if node.isPromoted() or node.isSticky() %}
      <div class="position-absolute top-0 end-0 m-2 z-1">
        {% if node.isPromoted() %}
          <span class="badge bg-success me-1" aria-label="{{ 'Promoted content'|t }}">{{ 'Promoted'|t }}</span>
        {% endif %}
        {% if node.isSticky() %}
          <span class="badge bg-warning text-dark" aria-label="{{ 'Sticky content'|t }}">{{ 'Sticky'|t }}</span>
        {% endif %}
      </div>
    {% endif %}

    <header class="card-header bg-light">
      {{ title_prefix }}
      {% if label and not page %}
        <h2{{ title_attributes.addClass(['node__title', 'h4', 'fw-bold', 'mb-2']).setAttribute('role', 'heading').setAttribute('aria-level', '2') }}>
          <a href="{{ url }}" rel="bookmark" class="text-decoration-none link-primary">{{ label }}</a>
        </h2>
      {% endif %}
      {{ title_suffix }}

      {% if display_submitted %}
        <div class="node__meta text-muted small mt-2" role="contentinfo" aria-label="{{ 'Submission details'|t }}">
          <div class="d-flex align-items-center">
            {% if author_picture %}
              <div class="node__author-image me-2">
                {{ author_picture }}
              </div>
            {% endif %}
            <span{{ author_attributes }}>
              {{ 'By'|t }}
              {% apply spaceless %}
                <span class="fw-semibold">{{ author_name }}</span>
              {% endapply %}
              , {{ date }}
            </span>
          </div>
          {{ metadata }}
        </div>
      {% endif %}
    </header>

    <div{{ content_attributes.addClass(['node__content', 'card-body', 'text-body']) }}>
      {{ content|without('comment') }}
    </div>

    {% if content.comment %}
      <div class="card-footer bg-white">
        <button class="btn btn-sm btn-outline-secondary w-100" type="button" data-bs-toggle="collapse" data-bs-target="#comments-{{ node.id }}" aria-expanded="false" aria-controls="comments-{{ node.id }}">
          {{ 'Show Comments'|t }}
        </button>
        <div id="comments-{{ node.id }}" class="collapse mt-3">
          {{ content.comment }}
        </div>
      </div>
    {% endif %}
  </article>
</div>
