<?php

use Drupal\Core\Render\Element;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\Core\Render\Markup;
use Drupal\node\NodeInterface;
use Drupal\Component\Utility\Html;
use Drupal\image\Entity\ImageStyle;

/**
 * Implements hook_preprocess_html().
 */
function drupalstacks_preprocess_html(&$variables) {
  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node instanceof \Drupal\node\NodeInterface) {
    $variables['head_title'] = Html::escape($node->label());
  }
}

/**
 * Implements hook_preprocess_node().
 */
function drupalstacks_preprocess_node(array &$variables) {
  // Ensure we're on a node.
  if (empty($variables['node']) || !$variables['node'] instanceof NodeInterface) {
    return;
  }

  $node = $variables['node'];
  $bundle = $node->bundle();
  $target_bundles = ['story', 'blog'];
  if (!in_array($bundle, $target_bundles, true)) {
    return;
  }
  if (($variables['view_mode'] ?? '') !== 'full') {
    return;
  }

  // Prefer a dedicated media/image field: field_featured_image.
  if ($node->hasField('field_featured_image') && !$node->get('field_featured_image')->isEmpty()) {
    $image_item = NULL;
    $file = NULL;

    // CASE A: field_featured_image is an Image field (File on node).
    if ($node->get('field_featured_image')->first()->entity && $node->get('field_featured_image')->first()->entity->getEntityTypeId() === 'file') {
      $image_item = $node->get('field_featured_image')->first();
      $file = $image_item->entity;
    }

    // CASE B: field_featured_image is a Media reference (Image media).
    if (!$file) {
      $media = $node->get('field_featured_image')->entity ?? NULL;
      if ($media && $media->hasField('field_media_image') && !$media->get('field_media_image')->isEmpty()) {
        $image_item = $media->get('field_media_image')->first();
        $file = $image_item->entity;
      }
    }

    if ($file) {
      $uri = $file->getFileUri();
      // Use the field-provided alt if available; fall back to node title.
      $alt = $image_item->alt ?? $node->label();

      // IMPORTANT: Create a Responsive image style named "hero_card" in the UI
      // (Configuration → Media → Responsive image styles) mapped to your breakpoints.
      $variables['featured_picture'] = [
        '#theme' => 'image_style',
        '#style_name' => 'story_hero_image',      // <-- change to your style machine name
        '#uri' => $uri,
        '#alt' => $alt,
        // These attributes will go on the <img> inside the <picture>.
        '#attributes' => [
          'class' => ['card-img-top', 'img-fluid', 'w-100'],
          'loading' => 'lazy',
          'decoding' => 'async',
        ],
      ];

      // Prevent the field from being printed again in {{ content }}.
      unset($variables['content']['field_featured_image']);
    }
    // If the content type has a comment field, prevent default rendering in {{ content }}.
    // Adjust field name if yours isn’t 'comment'.
    if (isset($variables['content']['comment'])) {
      // Either unset or gate with #access. #access keeps cache contexts sane.
      $variables['content']['comment']['#access'] = FALSE;
    }
  }

  // Also useful: a safe ISO date for <time datetime="..."> in Twig.
  if (method_exists($node, 'getCreatedTime')) {
    $variables['created_iso'] = \Drupal::service('date.formatter')->format($node->getCreatedTime(), 'custom', \DateTime::ATOM);
  }
}

/**
 * Implements hook_preprocess_block().
 */
function drupalstacks_preprocess_block(array &$vars) {
  // Only target your specific block; adjust to your block’s plugin/delta as needed.
  // Example: if you created a custom block “Author info”, inspect Twig debug suggestions.
  // Remove this if-block to allow on any block context where a node is present.
  // if ($vars['plugin_id'] !== 'YOUR_BLOCK_PLUGIN_ID') { return; }

  // Get node from route if on a node page.
  $node = \Drupal::routeMatch()->getParameter('node');
  if (!$node instanceof NodeInterface) {
    return;
  }

  if ($vars['plugin_id'] === 'views_block:author-blog_author_block' || $vars['elements']['#derivative_plugin_id'] === 'author-blog_author_block') {
    // Only target the "Author info" block from the "Author blog" view.
    // Author basics.
    $account = $node->getOwner();
    $vars['author_name'] = $account->getDisplayName();
    $vars['author_url']  = $account->toUrl()->toString();

    // Optional bio: adjust to your user field, e.g. field_bio.
    if ($account->hasField('field_author_bio') && !$account->get('field_author_bio')->isEmpty()) {
      $vars['author_bio'] = $account->get('field_author_bio')->value;
    }

    // Picture: try user picture; fall back to featured image on node.
    if ($account->user_picture && !$account->user_picture->isEmpty()) {
      $file = $account->user_picture->entity;
      if ($file) {
        $vars['author_picture_url'] = \Drupal::service('file_url_generator')
        ->generateAbsoluteString($file->getFileUri());
      }
    }

    // Published date.
    $timestamp = $node->getCreatedTime();
    $vars['published_iso']   = \Drupal::service('date.formatter')->format($timestamp, 'custom', \DateTime::ATOM);
    $vars['published_date']  = \Drupal::service('date.formatter')->format($timestamp, 'custom', 'F j, Y');
  
    // Build a render array for the comment field (label hidden).
    // Adjust the field name if yours isn’t 'comment'.
    $bundle = $node->bundle();
    if ($bundle == 'story') {
      if ($node->hasField('field_story_comments')) {
        $vars['author_block_comments'] = $node->get('field_story_comments')->view([
          'label' => 'hidden',
        ]);
      }
    }
  }
}

function drupalstacks_preprocess_paragraph__blog_hero_section(&$variables) {
  $paragraph = $variables['paragraph'];
  // Get field values
  $variables['title'] = $paragraph->get('field_blog_title')->value ?? '';
  $variables['subtitle'] = $paragraph->get('field_blog_subtitle')->value ?? '';
  $variables['featured_image'] = '';
  $variables['video_embed'] = $paragraph->get('field_blog_video_embed')->value ?? '';
  $variables['background_style'] = $paragraph->get('field_blog_background_style')->value ?? 'light';

  // Load image URL
  if (!$paragraph->get('field_blog_featured_image')->isEmpty()) {
    $image = $paragraph->get('field_blog_featured_image')->entity;
    if ($image) {
      $variables['featured_image'] = \Drupal::service('file_url_generator')
      ->generateAbsoluteString($image->getFileUri());
    }
  }
  if (!$paragraph->get('field_blog_featured_image')->isEmpty()) {
    $image = $paragraph->get('field_blog_featured_image')->entity;
    $uri = $image->getFileUri();

    // Responsive image styles
    $variables['hero_image_webp'] = [
      'small' => ImageStyle::load('hero_webp_small')->buildUrl($uri),
      'medium' => ImageStyle::load('hero_webp_medium')->buildUrl($uri),
      'large' => ImageStyle::load('hero_webp_large')->buildUrl($uri),
    ];
    $variables['hero_image_jpeg'] = [
      'small' => ImageStyle::load('hero_jpeg_small')->buildUrl($uri),
      'medium' => ImageStyle::load('hero_jpeg_medium')->buildUrl($uri),
      'large' => ImageStyle::load('hero_jpeg_large')->buildUrl($uri),
    ];

    $variables['hero_image_alt'] = $image->get('field_image_alt')->value ?? '';
  }
  // Add CSS class based on background style
  $variables['bg_class'] = 'hero--' . $variables['background_style'];
}

function drupalstacks_preprocess_paragraph__blog_content(&$variables) {
  $paragraph = $variables['paragraph'];
  $alignment = $paragraph->get('field_blog_body_alignment')->value;
  $variables['alignment_class'] = 'text-' . $alignment;
  $background_color = $paragraph->get('field_body_background_color')->value;
  $variables['background_style'] = 'background-color: ' . $background_color . ';';
  $body = $paragraph->get('field_blog_body')->view([
    'label' => 'hidden',
  ]);
  $variables['wrapper_class'] = 'blog-content-wrapper';
  // Sanitize and pass to Twig
  $variables['blog_body_alignment'] = $alignment ?: 'left';
  $variables['blog_body_background_color'] = $background_color ?: '#ffffff';
  $variables['blog_body'] = $body;

}

/**
 * Implements hook_preprocess_html().
 */
// function YOUR_THEME_preprocess_html(array &$variables) {
//   // Add a default meta description if Metatag is not installed.
//   $description = 'Welcome to our feature-rich Drupal site powered by Bootstrap 5.';
//   $variables['#attached']['html_head'][] = [
//     [
//       '#tag' => 'meta',
//       '#attributes' => [
//         'name' => 'description',
//         'content' => $description,
//       ],
//     ],
//     'meta_description',
//   ];

//   // Add a canonical URL if not already set.
//   if (!isset($variables['canonical_url'])) {
//     $variables['canonical_url'] = \Drupal::request()->getUri();
//   }

//   // Optionally add a fallback favicon.
//   $theme = \Drupal::theme()->getActiveTheme()->getName();
//   $theme_path = \Drupal::service('extension.path.resolver')->getPath('theme', $theme);

//   $variables['#attached']['html_head'][] = [
//     [
//       '#tag' => 'link',
//       '#attributes' => [
//         'rel' => 'shortcut icon',
//         'href' => '/' . $theme_path . '/favicon.ico',
//         'type' => 'image/x-icon',
//       ],
//     ],
//     'favicon',
//   ];
// }

/**
 * Implements hook_preprocess_HOOK() for page title templates.
 */
// function drupalstacks_preprocess_page_title(&$variables) {
//   // Since the title and the shortcut link are both block level elements,
//   // positioning them next to each other is much simpler with a wrapper div.
//   if (!empty($variables['title_suffix']['add_or_remove_shortcut']) && $variables['title']) {
//     // Add a wrapper div using the title_prefix and title_suffix render
//     // elements.
//     $variables['title_prefix']['shortcut_wrapper'] = [
//       '#markup' => '<div class="shortcut-wrapper">',
//       '#weight' => 100,
//     ];
//     $variables['title_suffix']['shortcut_wrapper'] = [
//       '#markup' => '</div>',
//       '#weight' => -99,
//     ];

//     // Make sure the shortcut link is the first item in title_suffix.
//     $variables['title_suffix']['add_or_remove_shortcut']['#weight'] = -100;
//   }

//   // Unset shortcut link on front page.
//   $variables['is_front'] = \Drupal::service('path.matcher')->isFrontPage();
//   if ($variables['is_front'] === TRUE) {
//     unset($variables['title_suffix']['add_or_remove_shortcut']);
//   }
// }

/**
 * Implements hook_preprocess_HOOK() for node.html.twig.
 */
// function drupalstacks_preprocess_node(&$variables) {
//   // Remove the "Add new comment" link on teasers or when the comment form is
//   // displayed on the page.
//   if ($variables['teaser'] || !empty($variables['content']['comments']['comment_form'])) {
//     unset($variables['content']['links']['comment']['#links']['comment-add']);
//   }

//   // Apply custom date formatter to "date" field.
//   if (!empty($variables['date']) && !empty($variables['display_submitted']) && $variables['display_submitted'] === TRUE) {
//     $variables['date'] = \Drupal::service('date.formatter')->format($variables['node']->getCreatedTime(), 'olivero_medium');
//   }

//   // Pass layout variable to template if content type is article in full view
//   // mode. This is then used in the template to create a BEM style CSS class to
//   // control the layout.
//   if ($variables['node']->bundle() === 'article' && $variables['view_mode'] === 'full') {
//     $variables['layout'] = 'content-narrow';
//   }
// }


/**
 * Implements hook_preprocess_HOOK() for maintenance-page.html.twig.
 */
// function drupalstacks_preprocess_maintenance_page(&$variables) {
//   // By default, site_name is set to Drupal if no db connection is available
//   // or during site installation. Setting site_name to an empty string makes
//   // the site and update pages look cleaner.
//   // @see template_preprocess_maintenance_page
//   if (!$variables['db_is_active']) {
//     $variables['site_name'] = '';
//   }
// }
/**
 * Implements hook_preprocess_links__comment().
 */
// function drupalstacks_preprocess_links__comment(&$variables) {
//   foreach ($variables['links'] as &$link) {
//     $link['link']['#options']['attributes']['class'][] = 'comment__links-link';
//   }
// }

/**
 * Implements hook_preprocess_HOOK() for comment.html.twig.
 */
// function drupalstacks_preprocess_comment(&$variables) {
//   // Getting the node creation time stamp from the comment object.
//   $date = $variables['comment']->getCreatedTime();
//   // Formatting "created" as "X days ago".
//   $variables['created'] = new TranslatableMarkup('@time ago', ['@time' => \Drupal::service('date.formatter')->formatInterval(\Drupal::time()->getRequestTime() - $date)]);
// }
/**
 * Implements hook_preprocess_HOOK() for menu-local-task templates.
 */
// function drupalstacks_preprocess_menu_local_task(&$variables) {
//   $variables['link']['#options']['attributes']['class'][] = 'tabs__link';
//   $variables['link']['#options']['attributes']['class'][] = 'js-tabs-link';

//   // Ensure is-active class is set when the tab is active. The generic active
//   // link handler applies stricter comparison rules than what is necessary for
//   // tabs.
//   if (isset($variables['is_active']) && $variables['is_active'] === TRUE) {
//     $variables['link']['#options']['attributes']['class'][] = 'is-active';
//   }

//   if (isset($variables['element']['#level'])) {
//     $variables['level'] = $variables['element']['#level'];
//   }
// }
/**
 * Implements hook_preprocess_HOOK() for menu-local-tasks templates.
 */
// function drupalstacks_preprocess_menu_local_tasks(&$variables) {
//   foreach (Element::children($variables['primary']) as $key) {
//     $variables['primary'][$key]['#level'] = 'primary';
//   }
//   foreach (Element::children($variables['secondary']) as $key) {
//     $variables['secondary'][$key]['#level'] = 'secondary';
//   }
// }
/**
 * Implements hook_theme_suggestions_HOOK_alter() for block().
 */
// function drupalstacks_theme_suggestions_block_alter(&$suggestions, array $variables) {
//   if (!empty($variables['elements']['#id'])) {

//     /** @var \Drupal\block\BlockInterface $block */
//     $block = \Drupal::entityTypeManager()
//       ->getStorage('block')
//       ->load($variables['elements']['#id']);
//     if ($block) {

//       // Add region-specific block theme suggestions.
//       $region = $block
//         ->getRegion();

//       $suggestions[] = 'block__' . $region;
//       $suggestions[] = 'block__' . $region . '__' . 'plugin_id' . '__' . $variables['elements']['#plugin_id'];
//       $suggestions[] = 'block__' . $region . '__' . 'id' . '__' . $variables['elements']['#id'];
//     }
//   }
// }
/**
 * Implements hook_preprocess_HOOK().
 */
// function drupalstacks_preprocess_menu(&$variables) {
//   if (isset($variables['attributes']['region'])) {
//     if ($variables['attributes']['region'] === 'sidebar') {
//       $variables['attributes']['class'][] = 'menu--sidebar';
//     }
//     unset($variables['attributes']['region']);
//   }
// }
/**
 * Implements hook_theme_suggestions_HOOK_alter() for menu.
 */
// function drupalstacks_theme_suggestions_menu_alter(&$suggestions, array $variables) {
//   if (isset($variables['attributes']['region'])) {
//     $suggestions[] = 'menu__' . $variables['attributes']['region'];
//   }
// }
