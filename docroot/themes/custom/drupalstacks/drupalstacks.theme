<?php

use Drupal\Core\Render\Element;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\Core\Render\Markup;
use Drupal\node\NodeInterface;
use Drupal\Component\Utility\Html;
use Drupal\image\Entity\ImageStyle;
use Drupal\node\Entity\Node;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Title\TitleResolverInterface;
use Symfony\Component\HttpFoundation\RequestStack;


/**
 * Implements hook_preprocess_html().
 */
function drupalstacks_preprocess_html(&$variables) {
  $node = \Drupal::routeMatch()->getParameter('node');
  if (!empty($node) && $node instanceof \Drupal\node\NodeInterface) {
    $variables['head_title'] = Html::escape($node->label());
  }
  else {
    $variables['head_title'] = getCurrentPathTitle();
  }
}

/**
 * Implements hook_preprocess_node().
 */
function drupalstacks_preprocess_node(array &$variables) {
  // Ensure we're on a node.
  if (empty($variables['node']) || !$variables['node'] instanceof NodeInterface) {
    return;
  }

  $node = $variables['node'];
  $bundle = $node->bundle();
  $target_bundles = ['story', 'blog'];
  if (!in_array($bundle, $target_bundles, true)) {
    return;
  }
  if (($variables['view_mode'] ?? '') !== 'full') {
    return;
  }

  // Prefer a dedicated media/image field: field_featured_image.
  if ($node->hasField('field_featured_image') && !$node->get('field_featured_image')->isEmpty()) {
    $image_item = NULL;
    $file = NULL;

    // CASE A: field_featured_image is an Image field (File on node).
    if ($node->get('field_featured_image')->first()->entity && $node->get('field_featured_image')->first()->entity->getEntityTypeId() === 'file') {
      $image_item = $node->get('field_featured_image')->first();
      $file = $image_item->entity;
    }

    // CASE B: field_featured_image is a Media reference (Image media).
    if (!$file) {
      $media = $node->get('field_featured_image')->entity ?? NULL;
      if ($media && $media->hasField('field_media_image') && !$media->get('field_media_image')->isEmpty()) {
        $image_item = $media->get('field_media_image')->first();
        $file = $image_item->entity;
      }
    }

    if ($file) {
      $uri = $file->getFileUri();
      // Use the field-provided alt if available; fall back to node title.
      $alt = $image_item->alt ?? $node->label();

      // IMPORTANT: Create a Responsive image style named "hero_card" in the UI
      // (Configuration → Media → Responsive image styles) mapped to your breakpoints.
      $variables['featured_picture'] = [
        '#theme' => 'image_style',
        '#style_name' => 'story_hero_image',      // <-- change to your style machine name
        '#uri' => $uri,
        '#alt' => $alt,
        // These attributes will go on the <img> inside the <picture>.
        '#attributes' => [
          'class' => ['card-img-top', 'img-fluid', 'w-100'],
          'loading' => 'lazy',
          'decoding' => 'async',
        ],
      ];

      // Prevent the field from being printed again in {{ content }}.
      unset($variables['content']['field_featured_image']);
    }
    // If the content type has a comment field, prevent default rendering in {{ content }}.
    // Adjust field name if yours isn’t 'comment'.
    if (isset($variables['content']['comment'])) {
      // Either unset or gate with #access. #access keeps cache contexts sane.
      $variables['content']['comment']['#access'] = FALSE;
    }
    // Unset authored by and authored on for story and blog page.
    unset($variables['author_picture']);
    unset($variables['display_submitted']);
    unset($variables['field_authored_on']);
    unset($variables['field_authored_by']);
    unset($variables['field_author_image']);
  }

  // Also useful: a safe ISO date for <time datetime="..."> in Twig.
  if (method_exists($node, 'getCreatedTime')) {
    $variables['created_iso'] = \Drupal::service('date.formatter')->format($node->getCreatedTime(), 'custom', \DateTime::ATOM);
  }
}

/**
 * Implements hook_preprocess_block().
 */
function drupalstacks_preprocess_block(array &$vars) {
  // Only target your specific block; adjust to your block’s plugin/delta as needed.
  // Example: if you created a custom block “Author info”, inspect Twig debug suggestions.
  // Remove this if-block to allow on any block context where a node is present.
  // if ($vars['plugin_id'] !== 'YOUR_BLOCK_PLUGIN_ID') { return; }

  // Get node from route if on a node page.
  $node = \Drupal::routeMatch()->getParameter('node');
  if (!$node instanceof NodeInterface) {
    return;
  }

  if ($vars['plugin_id'] === 'views_block:author-blog_author_block' || $vars['elements']['#derivative_plugin_id'] === 'author-blog_author_block') {
    // Only target the "Author info" block from the "Author blog" view.
    // Author basics.
    $account = $node->getOwner();
    $vars['author_name'] = $account->getDisplayName();
    $vars['author_url']  = $account->toUrl()->toString();

    // Optional bio: adjust to your user field, e.g. field_bio.
    if ($account->hasField('field_author_bio') && !$account->get('field_author_bio')->isEmpty()) {
      $vars['author_bio'] = $account->get('field_author_bio')->value;
    }

    // Picture: try user picture; fall back to featured image on node.
    if ($account->user_picture && !$account->user_picture->isEmpty()) {
      $file = $account->user_picture->entity;
      if ($file) {
        $vars['author_picture_url'] = \Drupal::service('file_url_generator')
        ->generateAbsoluteString($file->getFileUri());
      }
    }

    // Published date.
    $timestamp = $node->getCreatedTime();
    $vars['published_iso']   = \Drupal::service('date.formatter')->format($timestamp, 'custom', \DateTime::ATOM);
    $vars['published_date']  = \Drupal::service('date.formatter')->format($timestamp, 'custom', 'F j, Y');
  
    // Build a render array for the comment field (label hidden).
    // Adjust the field name if yours isn’t 'comment'.
    $bundle = $node->bundle();
    if ($bundle == 'story') {
      if ($node->hasField('field_story_comments')) {
        $vars['author_block_comments'] = $node->get('field_story_comments')->view([
          'label' => 'hidden',
        ]);
      }
    }
  }
}

function drupalstacks_preprocess_paragraph__blog_hero_section(&$variables) {
  $paragraph = $variables['paragraph'];
  // Get field values
  $title = $paragraph->get('field_blog_title')->value ?? '';
  $variables['title'] = $title ? mb_substr($title, 0, 40) : '';
  $subtitle = $paragraph->get('field_blog_subtitle')->value ?? '';
  $variables['subtitle'] = $title ? mb_substr($subtitle, 0, 100) : '';
  $variables['featured_image'] = '';
  $variables['video_embed'] = $paragraph->get('field_blog_video_embed')->value ?? '';
  //$variables['layout_style'] = $paragraph->get('field_blog_background_style')->value ?? 'light';

  // Load image URL
  if (!$paragraph->get('field_blog_featured_image')->isEmpty()) {
    $image = $paragraph->get('field_blog_featured_image')->entity;
    if ($image) {
      $uri = $image->getFileUri();
      // Responsive image styles
      $variables['hero_image_webp'] = [
        'small' => ImageStyle::load('hero_image_webp_small')->buildUrl($uri),
        'medium' => ImageStyle::load('hero_image_webp_medium')->buildUrl($uri),
        'large' => ImageStyle::load('hero_image_webp_large')->buildUrl($uri),
      ];
      $variables['hero_image_jpeg'] = [
        'small' => ImageStyle::load('hero_image_jpeg_small')->buildUrl($uri),
        'medium' => ImageStyle::load('hero_image_jpeg_medium')->buildUrl($uri),
        'large' => ImageStyle::load('hero_image_jpeg_large')->buildUrl($uri),
      ];
      $variables['featured_image'] = \Drupal::service('file_url_generator')
      ->generateAbsoluteString($uri);
    }
  }
  // Add CSS class based on background style
  //$variables['hero_style'] = $variables['background_style'];
  //$variables['bg_class'] = 'hero--' . $variables['background_style'];
  $layout_style = $paragraph->get('field_blog_background_style')->value ?? 'overlay';
  $theme_style = $paragraph->get('field_blog_theme_style')->value ?? 'light';

  $variables['layout_class'] = 'hero-style--' . $layout_style;
  $variables['theme_class'] = 'theme-style--' . $theme_style;

}

function drupalstacks_preprocess_paragraph__blog_content(&$variables) {
  $paragraph = $variables['paragraph'];
  $alignment = $paragraph->get('field_blog_body_alignment')->value;
  $variables['alignment_class'] = 'text-' . $alignment;
  $background_color = $paragraph->get('field_body_background_color')->value;
  $variables['background_style'] = 'background-color: ' . $background_color . ';';
  $body = $paragraph->get('field_blog_body')->view([
    'label' => 'hidden',
  ]);
  $variables['wrapper_class'] = 'blog-content-wrapper';
  // Sanitize and pass to Twig
  $variables['blog_body_alignment'] = $alignment ?: 'left';
  $variables['blog_body_background_color'] = $background_color ?: '#ffffff';
  $variables['blog_body'] = $body;
}

function drupalstacks_preprocess_paragraph__call_to_action(array &$variables) {
  $paragraph = $variables['paragraph'];
  // CTA text (formatted)
  $variables['cta_text'] = $paragraph->get('field_cta_text')->view();
  // Button label and URL
  $variables['cta_button_label'] = $paragraph->get('field_cta_button_label')->value ?? 'Click Here';
  $variables['cta_button_url'] = $paragraph->get('field_cta_button_url')->value ?? '#';
  // CTA style (e.g., primary, secondary, outline, danger)
  $style = $paragraph->get('field_cta_style')->value ?? 'primary';
  $variables['cta_style_class'] = 'cta-button--' . $style;
}

function drupalstacks_preprocess_paragraph__hero_image_gallery(array &$variables) {
  $paragraph = $variables['paragraph'];
  // Get layout style
  $layout = $paragraph->get('field_gallery_layout_style')->value ?? 'carousel';
  $variables['gallery_layout_class'] = 'gallery--' . $layout;

  // Theme class
  $theme = $paragraph->get('field_gallery_theme')->value ?? 'light';
  $variables['gallery_theme_class'] = 'gallery-theme--' . $theme;

  // Autoplay toggle
  $variables['gallery_autoplay'] = $paragraph->get('field_gallery_autoplay')->value ?? FALSE;

  // Prepare image gallery array
  $medias = $paragraph->get('field_blog_media_images')->referencedEntities();
  $gallery_items = [];
  foreach ($medias as $media) {
    $alt = $media->get('field_image_alt')->value ?? '';
    $caption = $media->get('field_image_caption')->value ?? '';
    if ($media && $media->bundle() === 'image') {
      $file = $media->get('field_media_image')->entity;
      if ($file) {
        $uri = $file->getFileUri();
        $gallery_items[] = [
          'webp' => ImageStyle::load('gallery_webp_large')->buildUrl($uri),
          'jpeg' => ImageStyle::load('gallery_jpeg_large')->buildUrl($uri),
          'alt' => $alt,
          'caption' => $caption,
        ];
      }
    }
  }
  $variables['gallery_items'] = $gallery_items;
  $variables['#attached']['library'][] = 'drupalstacks/slick-init';
}

function drupalstacks_preprocess_paragraph__related_articles(array &$variables) {
  $paragraph = $variables['paragraph'];

  // Display style class
  $style = $paragraph->get('field_display_style')->value ?? 'grid';
  $variables['display_style_class'] = 'related-articles--' . $style;

  // Auto-tagged toggle
  $variables['is_auto_tagged'] = $paragraph->get('field_auto_tagged')->value ?? FALSE;

  // Get manually linked articles
  $linked_nodes = $paragraph->get('field_manual_links')->referencedEntities();
  $articles = [];

  $card_count = $paragraph->get('field_card_count')->value ?? '2';
  $variables['card_count_class'] = 'card-count--' . $card_count;

  foreach ($linked_nodes as $node) {
    if ($node instanceof Node && $node->isPublished()) {
      $article = [
        'title' => $node->getTitle(),
        'url' => $node->toUrl()->toString(),
        'body' => NULL,
        'image' => NULL,
        'author_name' => NULL,
        'author_image' => NULL,
        'published_date' => NULL,
        'claps' => rand(10, 100),
        'responses' => rand(0, 20),
      ];
      // Check and render body field
      if ($node->hasField('body') && !$node->get('body')->isEmpty()) {
        $full_text = $node->get('body')->value;
        $plain_text = Html::decodeEntities(strip_tags($full_text));
        $trimmed = mb_substr($plain_text, 0, 100);
        $body_text = $trimmed . '… <a href="' . $node->toUrl()->toString() . '">Read more</a>';
        $article['body'] = [
          '#markup' => $body_text,
          '#allowed_tags' => ['a'],
        ];
      }

      $image_url = get_blog_paragraph_hero_image_url($node);
      // Check and render image field 
      if (!empty($image_url)) {
        $styled_url = ImageStyle::load('hero_image_webp_small')->buildUrl($image_url);
        $article['image'] = $styled_url;
      }
      else {
        if ($node->hasField('field_fallback_image') && !$node->get('field_fallback_image')->isEmpty()) {
          $image = $node->get('field_fallback_image')->entity;
          $uri = $image->getFileUri();
          $article['image'] = ImageStyle::load('hero_image_webp_small')->buildUrl($uri);
        }
      }

      $author = $node->getOwner();
      $article['author_name'] = $author->getDisplayName();
      // Optional: Get author's profile image
      if ($author->hasField('user_picture') && !$author->get('user_picture')->isEmpty()) {
        $image = $author->get('user_picture')->entity;
        if ($image) {
          $uri = $image->getFileUri();
          $article['author_image'] = ImageStyle::load('avatar_circle_smallest')->buildUrl($uri);
        }
      }
      $article['published_date']  = \Drupal::service('date.formatter')->format($node->getCreatedTime(), 'custom', 'M d, Y');
      $articles[] = $article;
    }
  }
  $variables['related_articles'] = $articles;
  $variables['#attached']['library'][] = 'drupalstacks/popup-menu';
}

function get_blog_paragraph_hero_image_url(Node $node) {
  // Check if node has the paragraph field
  if ($node->hasField('field_blog_paragraph') && !$node->get('field_blog_paragraph')->isEmpty()) {
    $paragraphs = $node->get('field_blog_paragraph')->referencedEntities();

    foreach ($paragraphs as $paragraph) {
      if ($paragraph instanceof Paragraph && $paragraph->bundle() === 'blog_hero_section') {
        // Check if paragraph has the image field
        if ($paragraph->hasField('field_blog_featured_image') && !$paragraph->get('field_blog_featured_image')->isEmpty()) {
          $image = $paragraph->get('field_blog_featured_image')->entity;
          if ($image) {
            return $image->getFileUri();
          }
        }
      }
    }
  }

  return NULL;
}

function drupalstacks_preprocess_paragraph__blog_quote_testimonial(array &$variables) {
  $paragraph = $variables['paragraph'];

  $author_name = $paragraph->get('field_blog_author_name')->value ?? '';
  $quote_text = '';//$paragraph->get('field_quote_text')->value ?? '';
  $quote_style = $paragraph->get('field_blog_quote_style')->value ?? 'default';
  $author_image_url = '';

  if ($paragraph->hasField('field_blog_author_image') && !$paragraph->get('field_blog_author_image')->isEmpty()) {
    $image = $paragraph->get('field_blog_author_image')->entity;
    if ($image) {
      $uri = $image->getFileUri();
      $author_image_url = ImageStyle::load('avatar_circle_medium')->buildUrl($uri);
    }
  }

  $variables['author_name'] = $author_name;
  $variables['quote_text'] = $quote_text;
  $variables['quote_style_class'] = 'quote-style--' . $quote_style;
  $variables['author_image'] = $author_image_url;
}

/**
 * NEW QUOTE IMplementation
 */
function drupalstacks_preprocess_paragraph__blog_quote(array &$variables) {
  $paragraph = $variables['paragraph'];

  // Core fields
  $variables['quote_text'] = $paragraph->get('field_quote_text')->value ?? '';
  $variables['quote_author'] = $paragraph->get('field_quote_author')->value ?? '';
  $variables['quote_author_title'] = $paragraph->get('field_author_title')->value ?? '';
  $variables['quote_date'] = $paragraph->get('field_quote_date')->value ?? '';
  $variables['quote_source'] = $paragraph->get('field_quote_source')->value ?? '';
  $variables['quote_tags'] = $paragraph->get('field_quote_tags')->referencedEntities();

  // Style class
  $style = $paragraph->get('field_quote_style')->value ?? 'default';
  $variables['quote_style_class'] = 'quote-style--' . $style;

  // Featured flag
  $variables['is_featured'] = !$paragraph->get('field_featured_quote')->isEmpty();

  // Background color
  $variables['background_color'] = $paragraph->get('field_background_color')->value ?? '';

  // Author image
  $variables['quote_author_image'] = '';
  if ($paragraph->hasField('field_author_image') && !$paragraph->get('field_author_image')->isEmpty()) {
    $image = $paragraph->get('field_author_image')->entity;
    if ($image) {
      $uri = $image->getFileUri();
      $variables['quote_author_image'] = ImageStyle::load('avatar_circle_smaller')->buildUrl($uri);
    }
  }
}

function drupalstacks_preprocess_paragraph__blog_testimonials(array &$variables) {
  $paragraph = $variables['paragraph'];
  $variables['testimonial_text'] = $paragraph->get('field_testimonial_text')->value ?? '';
  $variables['author_name'] = $paragraph->get('field_author_name')->value ?? '';
  $variables['author_title'] = $paragraph->get('field_author_title')->value ?? '';
  $variables['testimonial_date'] = $paragraph->get('field_testimonial_date')->value ?? '';
  $variables['testimonial_tags'] = $paragraph->get('field_testimonial_tags')->referencedEntities();
  $variables['testimonial_style_class'] = 'testimonial-style--' . ($paragraph->get('field_quote_style')->value ?? 'default');
  $variables['is_featured'] = !$paragraph->get('field_featured_testimonial')->isEmpty();
  $variables['background_color'] = $paragraph->get('field_background_color')->value ?? '';
  $variables['rating'] = $paragraph->get('field_testimonial_rating')->value ?? '';

  $variables['author_image'] = '';
  if ($paragraph->hasField('field_author_image') && !$paragraph->get('field_author_image')->isEmpty()) {
    $image = $paragraph->get('field_author_image')->entity;
    if ($image) {
      $uri = $image->getFileUri();
      $variables['author_image'] = ImageStyle::load('avatar_circle_smaller')->buildUrl($uri);
    }
  }

  // Create a space-separated tag class list for filtering via CSS
  $tag_classes = [];
  foreach ($variables['testimonial_tags'] as $tag) {
    $tag_classes[] = 'tag-' . strtolower(preg_replace('/[^a-z0-9]+/', '-', $tag->label()));
  }
  $variables['tag_class_list'] = implode(' ', $tag_classes);
}

function drupalstacks_preprocess_paragraph__faq(array &$variables) {
  $paragraph = $variables['paragraph'];

  $style = $paragraph->get('field_accordion_style')->value ?? 'default';
  $variables['accordion_style_class'] = 'accordion-style--' . $style;

  $variables['faq_items'] = [];
  if ($paragraph->hasField('field_faq_item') && !$paragraph->get('field_faq_item')->isEmpty()) {
    foreach ($paragraph->get('field_faq_item')->referencedEntities() as $item) {
      $id = $item->id();
      $variables['faq_items'][] = [
        'question' => $item->get('field_faq_question')->value,
        'answer' => $item->get('field_faq_answer')->view('default'),
        'id' => $id,
      ];
    }
  }
}

function drupalstacks_preprocess_paragraph__poll_survey_embed(array &$variables) {
  $paragraph = $variables['paragraph'];

  $variables['description'] = $paragraph->get('field_description')->value ?? '';
  $variables['display_mode'] = $paragraph->get('field_display_mode')->value ?? 'default';
  $variables['embed_code'] = $paragraph->get('field_embed_code')->value ?? '';

  // Style class based on display mode
  $variables['display_class'] = 'poll-display--' . $variables['display_mode'];
}

function drupalstacks_preprocess_paragraph__blog_author_bio(array &$variables) {
  $paragraph = $variables['paragraph'];

  $variables['author_name'] = $paragraph->get('field_author_name')->value ?? '';
  $variables['bio_text'] = $paragraph->get('field_bio_text')->value ?? '';

  // Author photo
  $variables['author_photo'] = '';
  if ($paragraph->hasField('field_author_photo') && !$paragraph->get('field_author_photo')->isEmpty()) {
    $image = $paragraph->get('field_author_photo')->entity;
    if ($image) {
      $uri = $image->getFileUri();
      $variables['author_photo'] = ImageStyle::load('avatar_circle_smaller')->buildUrl($uri);
    }
  }

  // Social links
  $variables['social_links'] = [];
  if ($paragraph->hasField('field_social_links') && !$paragraph->get('field_social_links')->isEmpty()) {
    foreach ($paragraph->get('field_social_links') as $link_item) {
      $url = $link_item->get('uri')->getValue();
      $title = $link_item->get('title')->getValue();
      $variables['social_links'][] = [
        'url' => $url,
        'title' => $title,
      ];
    }
  }

  // Optional style class (if you add a style field)
  $style = $paragraph->get('field_bio_style')->value ?? 'default';
  $variables['bio_style_class'] = 'author-bio--' . $style;
}

function drupalstacks_preprocess_paragraph__video_embed(array &$variables) {
  $paragraph = $variables['paragraph'];

  $variables['video_url'] = $paragraph->get('field_video_url')->value ?? '';
  $variables['caption'] = $paragraph->get('field_video_embed_caption')->value ?? '';
  $variables['autoplay'] = !$paragraph->get('field_video_embed_autoplay')->isEmpty();

  // Extract video ID from YouTube or Vimeo URL
  $video_id = '';
  $provider = '';
  if (strpos($variables['video_url'], 'youtube.com') !== false || strpos($variables['video_url'], 'youtu.be') !== false) {
    $provider = 'youtube';
    preg_match('/(?:v=|\/)([a-zA-Z0-9_-]{11})/', $variables['video_url'], $matches);
    $video_id = $matches[1] ?? '';
  } elseif (strpos($variables['video_url'], 'vimeo.com') !== false) {
    $provider = 'vimeo';
    preg_match('/vimeo\.com\/(\d+)/', $variables['video_url'], $matches);
    $video_id = $matches[1] ?? '';
  }

  $variables['provider'] = $provider;
  $variables['video_id'] = $video_id;
}


/**
 * Returns the current path title.
 *
 * @return string|null
 *   The title of the current route, or NULL if not available.
 */
function getCurrentPathTitle() {
  $route_match = \Drupal::routeMatch();
  $route = $route_match->getRouteObject();
  if ($route) {
    $title_resolver = \Drupal::service('title_resolver');
    $request = \Drupal::service('request_stack')->getCurrentRequest();
    $title = $title_resolver->getTitle($request, $route, $route_match->getParameters());
    return $title;
  }
  return NULL;
}

function drupalstacks_preprocess_paragraph__dynamic_author_bio(array &$variables) {
  $paragraph = $variables['paragraph'];
  $parent_node = $paragraph->getParentEntity();

  if ($parent_node instanceof \Drupal\node\NodeInterface) {
    //$variables['parent_node'] = $parent_node;
    $author = $parent_node->getOwner();
    $variables['author_name'] = $author->getDisplayName();
    $variables['author_url'] = $author->toUrl()->toString();
    // If user picture field exists
    if ($author->hasField('user_picture') && !$author->get('user_picture')->isEmpty()) {
      $image = $author->get('user_picture')->entity;
      if ($image) {
        $uri = $image->getFileUri();
        $variables['author_photo'] = ImageStyle::load('avatar_circle_smaller')->buildUrl($uri);
      }
    }
    // Get user description if available
    if ($author->hasField('field_user_description') && !$author->get('field_user_description')->isEmpty()) {
      $variables['bio_text'] = $author->get('field_user_description')->value;
    }
    // Optional style class (if you add a style field)
    $style = $paragraph->get('field_bio_style')->value ?? 'default';
    $variables['bio_style_class'] = 'author-bio--' . $style;

    // // Social links
    // $variables['social_links'] = [];
    // if ($paragraph->hasField('field_social_links') && !$paragraph->get('field_social_links')->isEmpty()) {
    //   foreach ($paragraph->get('field_social_links') as $link_item) {
    //     $url = $link_item->get('uri')->getValue();
    //     $title = $link_item->get('title')->getValue();
    //     $variables['social_links'][] = [
    //       'url' => $url,
    //       'title' => $title,
    //     ];
    //   }
    // }

  }

}

function drupalstacks_preprocess_paragraph__cta_with_image(array &$variables) {
  $paragraph = $variables['paragraph'];

  $variables['title'] = $paragraph->get('field_cta_title')->value ?? '';
  $variables['text'] = $paragraph->get('field_cta_image_text')->view('default');
  $variables['link'] = $paragraph->get('field_cta_link')->first()?->getUrl()?->toString() ?? '';
  $variables['link_title'] = $paragraph->get('field_cta_link')->first()?->title ?? 'Learn More';

  $style = $paragraph->get('field_cta_display_style')->value ?? 'left';
  $variables['cta_style_class'] = 'cta-style--' . $style;

  $variables['image_url'] = '';
  if ($paragraph->hasField('field_cta_image') && !$paragraph->get('field_cta_image')->isEmpty()) {
    $image = $paragraph->get('field_cta_image')->entity;
    $image_style = 'cta_half';
    if ($style == 'full') {
      $image_style = 'cta_full_width';
    }
    
    $uri = $image->getFileUri();
    $variables['image_url'] = ImageStyle::load($image_style)->buildUrl($uri);
  }
}

/**
 * Implements hook_preprocess_html().
 */
// function YOUR_THEME_preprocess_html(array &$variables) {
//   // Add a default meta description if Metatag is not installed.
//   $description = 'Welcome to our feature-rich Drupal site powered by Bootstrap 5.';
//   $variables['#attached']['html_head'][] = [
//     [
//       '#tag' => 'meta',
//       '#attributes' => [
//         'name' => 'description',
//         'content' => $description,
//       ],
//     ],
//     'meta_description',
//   ];

//   // Add a canonical URL if not already set.
//   if (!isset($variables['canonical_url'])) {
//     $variables['canonical_url'] = \Drupal::request()->getUri();
//   }

//   // Optionally add a fallback favicon.
//   $theme = \Drupal::theme()->getActiveTheme()->getName();
//   $theme_path = \Drupal::service('extension.path.resolver')->getPath('theme', $theme);

//   $variables['#attached']['html_head'][] = [
//     [
//       '#tag' => 'link',
//       '#attributes' => [
//         'rel' => 'shortcut icon',
//         'href' => '/' . $theme_path . '/favicon.ico',
//         'type' => 'image/x-icon',
//       ],
//     ],
//     'favicon',
//   ];
// }

/**
 * Implements hook_preprocess_HOOK() for page title templates.
 */
// function drupalstacks_preprocess_page_title(&$variables) {
//   // Since the title and the shortcut link are both block level elements,
//   // positioning them next to each other is much simpler with a wrapper div.
//   if (!empty($variables['title_suffix']['add_or_remove_shortcut']) && $variables['title']) {
//     // Add a wrapper div using the title_prefix and title_suffix render
//     // elements.
//     $variables['title_prefix']['shortcut_wrapper'] = [
//       '#markup' => '<div class="shortcut-wrapper">',
//       '#weight' => 100,
//     ];
//     $variables['title_suffix']['shortcut_wrapper'] = [
//       '#markup' => '</div>',
//       '#weight' => -99,
//     ];

//     // Make sure the shortcut link is the first item in title_suffix.
//     $variables['title_suffix']['add_or_remove_shortcut']['#weight'] = -100;
//   }

//   // Unset shortcut link on front page.
//   $variables['is_front'] = \Drupal::service('path.matcher')->isFrontPage();
//   if ($variables['is_front'] === TRUE) {
//     unset($variables['title_suffix']['add_or_remove_shortcut']);
//   }
// }

/**
 * Implements hook_preprocess_HOOK() for node.html.twig.
 */
// function drupalstacks_preprocess_node(&$variables) {
//   // Remove the "Add new comment" link on teasers or when the comment form is
//   // displayed on the page.
//   if ($variables['teaser'] || !empty($variables['content']['comments']['comment_form'])) {
//     unset($variables['content']['links']['comment']['#links']['comment-add']);
//   }

//   // Apply custom date formatter to "date" field.
//   if (!empty($variables['date']) && !empty($variables['display_submitted']) && $variables['display_submitted'] === TRUE) {
//     $variables['date'] = \Drupal::service('date.formatter')->format($variables['node']->getCreatedTime(), 'olivero_medium');
//   }

//   // Pass layout variable to template if content type is article in full view
//   // mode. This is then used in the template to create a BEM style CSS class to
//   // control the layout.
//   if ($variables['node']->bundle() === 'article' && $variables['view_mode'] === 'full') {
//     $variables['layout'] = 'content-narrow';
//   }
// }


/**
 * Implements hook_preprocess_HOOK() for maintenance-page.html.twig.
 */
// function drupalstacks_preprocess_maintenance_page(&$variables) {
//   // By default, site_name is set to Drupal if no db connection is available
//   // or during site installation. Setting site_name to an empty string makes
//   // the site and update pages look cleaner.
//   // @see template_preprocess_maintenance_page
//   if (!$variables['db_is_active']) {
//     $variables['site_name'] = '';
//   }
// }
/**
 * Implements hook_preprocess_links__comment().
 */
// function drupalstacks_preprocess_links__comment(&$variables) {
//   foreach ($variables['links'] as &$link) {
//     $link['link']['#options']['attributes']['class'][] = 'comment__links-link';
//   }
// }

/**
 * Implements hook_preprocess_HOOK() for comment.html.twig.
 */
// function drupalstacks_preprocess_comment(&$variables) {
//   // Getting the node creation time stamp from the comment object.
//   $date = $variables['comment']->getCreatedTime();
//   // Formatting "created" as "X days ago".
//   $variables['created'] = new TranslatableMarkup('@time ago', ['@time' => \Drupal::service('date.formatter')->formatInterval(\Drupal::time()->getRequestTime() - $date)]);
// }
/**
 * Implements hook_preprocess_HOOK() for menu-local-task templates.
 */
// function drupalstacks_preprocess_menu_local_task(&$variables) {
//   $variables['link']['#options']['attributes']['class'][] = 'tabs__link';
//   $variables['link']['#options']['attributes']['class'][] = 'js-tabs-link';

//   // Ensure is-active class is set when the tab is active. The generic active
//   // link handler applies stricter comparison rules than what is necessary for
//   // tabs.
//   if (isset($variables['is_active']) && $variables['is_active'] === TRUE) {
//     $variables['link']['#options']['attributes']['class'][] = 'is-active';
//   }

//   if (isset($variables['element']['#level'])) {
//     $variables['level'] = $variables['element']['#level'];
//   }
// }
/**
 * Implements hook_preprocess_HOOK() for menu-local-tasks templates.
 */
// function drupalstacks_preprocess_menu_local_tasks(&$variables) {
//   foreach (Element::children($variables['primary']) as $key) {
//     $variables['primary'][$key]['#level'] = 'primary';
//   }
//   foreach (Element::children($variables['secondary']) as $key) {
//     $variables['secondary'][$key]['#level'] = 'secondary';
//   }
// }
/**
 * Implements hook_theme_suggestions_HOOK_alter() for block().
 */
// function drupalstacks_theme_suggestions_block_alter(&$suggestions, array $variables) {
//   if (!empty($variables['elements']['#id'])) {

//     /** @var \Drupal\block\BlockInterface $block */
//     $block = \Drupal::entityTypeManager()
//       ->getStorage('block')
//       ->load($variables['elements']['#id']);
//     if ($block) {

//       // Add region-specific block theme suggestions.
//       $region = $block
//         ->getRegion();

//       $suggestions[] = 'block__' . $region;
//       $suggestions[] = 'block__' . $region . '__' . 'plugin_id' . '__' . $variables['elements']['#plugin_id'];
//       $suggestions[] = 'block__' . $region . '__' . 'id' . '__' . $variables['elements']['#id'];
//     }
//   }
// }
/**
 * Implements hook_preprocess_HOOK().
 */
// function drupalstacks_preprocess_menu(&$variables) {
//   if (isset($variables['attributes']['region'])) {
//     if ($variables['attributes']['region'] === 'sidebar') {
//       $variables['attributes']['class'][] = 'menu--sidebar';
//     }
//     unset($variables['attributes']['region']);
//   }
// }
/**
 * Implements hook_theme_suggestions_HOOK_alter() for menu.
 */
// function drupalstacks_theme_suggestions_menu_alter(&$suggestions, array $variables) {
//   if (isset($variables['attributes']['region'])) {
//     $suggestions[] = 'menu__' . $variables['attributes']['region'];
//   }
// }
